import streamlit as st
st.set_page_config(layout="wide")
st.title("谈虚拟化")
st.subheader("1.容器虚拟化", divider=True)
st.write("docker是常见的容器虚拟化方式，比较新的podman灯应用也兼容docker，并且去掉了增加安全风险的守护进程。")
st.write("我之前在istoreos使用docker，每个容器具有接近操作系统的操作方法，可以分离服务器和远程桌面等应用，避免互相影响。不过由于docker共用操作系统内核而istoreos缩减了内核功能，可能是造成目前遇到的一些兼容性问题的原因。")
st.write("我使用docker部署streamlit项目的方案也有一些调整。刚开始按streamlit官方的说明把源码封装到docker，每次更新都要重新创建docker，速度较慢。后来改为启动docker并挂载目录，按一般的服务器系统的方法使用，改善了部署速度但出现故障时不能及时恢复。最后改成挂载目录并使用启动命令直接安装环境和启动程序，配合重启策略实现了稳定运行，不过实测也存在更新后需要重启的问题。")
st.subheader("2.系统虚拟化", divider=True)
st.write("pve和exsi等操作系统虚拟化方法在每个虚拟机单独运行内核。其中pve基于debian，可以直接运行docker，虽然开源但集群部署功能是商业化的。exsi本身作为商业应用，由于不直接使用linux发行版导致运行docker有一定的性能损耗。")
st.write("相比docker，pve作为系统虚拟化，在不同虚拟机可以使用不同的操作系统内核，也能进行内核开发等工作。另外支持显卡直通或安装桌面环境作为物理机使用。这样可以实现虚拟机和物理机两用，也可以作为不依赖客户机的中心化电脑使用（只直通亮机卡或分配闲置显卡以实现动态性能分配）。另外，pve的novnc功能也可以给任意虚拟机开启远程桌面，相比docker不需要特定的镜像或额外配置。")
st.write("由于在istoreos使用docker遇到兼容性问题，我改用pve作为虚拟化方案，安装了istoreos和linux mint，解决了兼容性问题。为了方便配置，仍使用istoreos运行docker应用。linux mint配置了uefi bios和virtio-gpu实现分辨率调整，并在客户机使用spice以提高性能。")
st.write("pve提供的串流方法由于对局部刷新的优化，画面变化较小的应用中表现较好，但在画面变化较大的应用中延时很长，在主力机安装时也没有改善，应该是pve对串流性能占用的限制。因此有串流游戏和多媒体应用的需求还是建议安装windows并使用sunshine串流或在linux通过docker安装带kasmvnc的系统，另外也能用rdp串流其它应用。")
st.subheader("3.集群虚拟化", divider=True)
st.write("k8s是常见的集群虚拟化形式，也有k3s等轻量化的方法。这类方法对集群的虚拟化支持优于前面两类形式。如果只用于单一物理机，也能实现更完善的容器监控、版本管理和存储管理等功能，但总体来说只适合复杂业务。")
st.subheader("4.istoreos上的虚拟化", divider=True)
st.write("istoreos有比较完善的docker功能，并且通过docker提供kvm和pve，可以实现虚拟化。kvm由于搭配的webvirtcloud的问题，可能不能正常打开管理页面，并且同样需要内核，因此用pve好一些。不过再次测试发现经常因权限问题导致无法正常使用挂载的硬盘并且很难手动修改。经过几轮更换后还是决定在局域网服务器使用windows。")
st.subheader("5.局域网服务器方案的分析", divider=True)
st.write("我使用局域网服务器刚开始考虑只用于文件\媒体服务器以及部署streamlit应用，但因为缩略图生成速度问题更换到j4125主机，另外考虑瘦客户机方案，因此提高了对图形界面的要求。")
st.write("前文已对以虚拟化为核心的系统的方案进行分析。")
st.write("在使用图形界面的情况下，带桌面环境的linux发行版由于兼容性完善和支持xrdp串流，可以满足绝大多数需求，但配置smb时大致只能兼容文件管理器有“网络”选项的设备而不支持扫描smb服务器，对手机的支持较差。")
st.write("Windows系统的文件共享、远程桌面功能都比较完善并且扩展其它功能时不容易出现难以配置的问题，虽然用于开发时存在不能直接在终端使用一些编程语言的指令的问题，但整体功能相比其它系统更加完善。")
st.subheader("6.各系统可以进行的改进", divider=True)
st.write("istoreos相比一般的Linux发行版虽然对端口权限等方面进行了优化，但还是存在硬盘访问权限问题，应当提供手动挂载的功能，显卡直通最好也能做到开箱即用。")
st.write("pve的虚拟化功能比较完善，但ip地址等配置比较麻烦，如果能在出现冲突时改为自动获取ip地址、允许物理机直接显示虚拟机内容或管理界面、提供sunshine等视频串流功能就比较好用了。")
st.write("一般的桌面linux系统主要改进方向还是简化权限配置，另外要避免系统代理与应用冲突。")
st.write("windows系统的主要改进方向是完善界面一致性、内置更多编程语言的支持并方便通过终端调用。")
st.subheader("7.回归Linux", divider=True)
st.write("在j4125主机使用Windows后有一个硬盘不能正常使用，但在主力机上正常。另外考虑到使用Windows虽然远程桌面表现更好，但系统本身响应较慢且启动用时长，不适合低功耗设备，因此重新尝试Linux桌面系统。")
st.write("使用Linux桌面系统配置远程桌面用xrdp即可。文件共享之前用smb难解决权限问题，进行自动挂载、开启root用户ssh并使用sftp进行共享比较方便，同时适用于远程开发。安卓有带sftp连接功能的客户端，在windows需要安装WinFSP和sshfs-win再映射网络驱动器，路径使用“\\sshfs.r\用户名@IP地址!端口号\home”实现按绝对路径挂载。")
st.write("为了避免出现局域网无法访问的问题，使用docker部署jellyfin。部署时遇到了没有--volume等参数导致需要docker compose以及挂载卷需要绝对路径的情况。由于使用xrdp需要经常注销，为了确保持续运行，python应用也通过docker部署。")
st.write("至此，我成功在Linux桌面系统部署了所有预期的局域网服务器功能。虽然我从桌面系统开始接触Linux，但这次成功部署也要归功于尝试istoreos时使用docker的经验和尝试pve时使用ssh的经验。")
